/**
 * Suite de tests compl√®te pour cours.html - FunRevis V2
 * Orchestrateur principal des tests
 */

const CoursHtmlValidator = require('./cours-validator');
const CoursIntegrationTester = require('./cours-integration');
const fs = require('fs');
const path = require('path');

class CoursTestSuite {
    constructor() {
        this.validator = new CoursHtmlValidator();
        this.integrationTester = new CoursIntegrationTester();
        this.overallResults = {
            validation: null,
            integration: null,
            overall: null
        };
    }

    async runFullTestSuite() {
        console.log('üöÄ D√âMARRAGE SUITE DE TESTS COMPL√àTE - COURS.HTML');
        console.log('='.repeat(60));
        console.log('üìÖ Date:', new Date().toLocaleString('fr-FR'));
        console.log('üìÅ Fichier test√©: cours.html');
        console.log('üéØ Objectif: Validation robuste du fichier critique');
        console.log('='.repeat(60));
        
        const startTime = Date.now();
        
        try {
            // Phase 1: Tests de validation
            console.log('\nüìã PHASE 1: TESTS DE VALIDATION');
            console.log('-'.repeat(40));
            await this.validator.runAllTests();
            
            // Phase 2: Tests d'int√©gration
            console.log('\nüîÑ PHASE 2: TESTS D\'INT√âGRATION');
            console.log('-'.repeat(40));
            await this.integrationTester.runIntegrationTests();
            
            // Phase 3: Analyse et rapport final
            console.log('\nüìä PHASE 3: ANALYSE FINALE');
            console.log('-'.repeat(40));
            await this.generateFinalReport();
            
            const endTime = Date.now();
            const duration = Math.round((endTime - startTime) / 1000);
            
            console.log(`\n‚è±Ô∏è Dur√©e totale: ${duration}s`);
            console.log('‚úÖ Suite de tests termin√©e');
            
        } catch (error) {
            console.error('‚ùå Erreur lors des tests:', error.message);
            process.exit(1);
        }
    }

    async generateFinalReport() {
        // Lire les rapports individuels
        const validationReport = this.readReport('cours-validation.json');
        const integrationReport = this.readReport('cours-integration.json');
        
        if (!validationReport || !integrationReport) {
            console.error('‚ùå Impossible de lire les rapports individuels');
            return;
        }
        
        // Calculer le score global
        const totalScore = validationReport.score + integrationReport.score;
        const totalTests = validationReport.total + integrationReport.total;
        const overallPercentage = Math.round((totalScore / totalTests) * 100);
        
        // D√©terminer le statut
        let status = '‚ùå CRITIQUE';
        let recommendation = '';
        
        if (overallPercentage >= 90) {
            status = 'üèÜ EXCELLENT';
            recommendation = 'Le fichier cours.html est parfaitement valid√© et pr√™t pour la production.';
        } else if (overallPercentage >= 80) {
            status = '‚úÖ BON';
            recommendation = 'Le fichier cours.html est solide avec quelques am√©liorations mineures possibles.';
        } else if (overallPercentage >= 70) {
            status = '‚ö†Ô∏è ACCEPTABLE';
            recommendation = 'Le fichier cours.html fonctionne mais n√©cessite des corrections importantes.';
        } else if (overallPercentage >= 60) {
            status = 'üîß PROBL√âMATIQUE';
            recommendation = 'Le fichier cours.html a des probl√®mes critiques √† r√©soudre avant d√©ploiement.';
        } else {
            status = 'üö® CRITIQUE';
            recommendation = 'Le fichier cours.html n√©cessite une refonte majeure avant utilisation.';
        }
        
        // Afficher le rapport final
        console.log('üìà RAPPORT FINAL CONSOLID√â');
        console.log('='.repeat(50));
        console.log(`üìÑ Fichier: cours.html`);
        console.log(`üìä Score global: ${totalScore}/${totalTests} (${overallPercentage}%)`);
        console.log(`üéØ Statut: ${status}`);
        console.log('');
        console.log('üìã D√©tail par phase:');
        console.log(`  üìù Validation: ${validationReport.score}/${validationReport.total} (${validationReport.percentage}%)`);
        console.log(`  üîÑ Int√©gration: ${integrationReport.score}/${integrationReport.total} (${integrationReport.percentage}%)`);
        console.log('');
        console.log('üí° Recommandation:');
        console.log(`  ${recommendation}`);
        
        // Analyse d√©taill√©e des √©checs
        const allFailures = [
            ...validationReport.results.filter(r => !r.passed),
            ...integrationReport.results.filter(r => !r.passed)
        ];
        
        if (allFailures.length > 0) {
            console.log('\nüö® Points √† corriger:');
            allFailures.forEach((failure, index) => {
                console.log(`  ${index + 1}. ${failure.message}`);
            });
        }
        
        // Points forts
        const allSuccesses = [
            ...validationReport.results.filter(r => r.passed),
            ...integrationReport.results.filter(r => r.passed)
        ];
        
        if (allSuccesses.length > 0) {
            console.log('\n‚úÖ Points forts valid√©s:');
            const topSuccesses = allSuccesses.slice(0, 5); // Top 5
            topSuccesses.forEach((success, index) => {
                console.log(`  ${index + 1}. ${success.message}`);
            });
            if (allSuccesses.length > 5) {
                console.log(`  ... et ${allSuccesses.length - 5} autres tests r√©ussis`);
            }
        }
        
        // Sauvegarder le rapport consolid√©
        const consolidatedReport = {
            timestamp: new Date().toISOString(),
            file: 'cours.html',
            overall: {
                score: totalScore,
                total: totalTests,
                percentage: overallPercentage,
                status: status,
                recommendation: recommendation
            },
            validation: validationReport,
            integration: integrationReport,
            failures: allFailures,
            successes: allSuccesses
        };
        
        const reportPath = path.join(__dirname, '../test-reports/cours-final-report.json');
        fs.writeFileSync(reportPath, JSON.stringify(consolidatedReport, null, 2));
        
        console.log(`\nüìÑ Rapport final sauv√©: ${reportPath}`);
        console.log('\nüîç Pour plus de d√©tails, consultez les rapports individuels dans test-reports/');
        
        // D√©terminer le code de sortie
        if (overallPercentage < 70) {
            console.log('\n‚ö†Ô∏è Score insuffisant - des corrections sont n√©cessaires');
            process.exitCode = 1;
        } else {
            console.log('\nüéâ Validation r√©ussie - fichier pr√™t pour utilisation');
        }
    }

    readReport(filename) {
        try {
            const reportPath = path.join(__dirname, '../test-reports', filename);
            if (fs.existsSync(reportPath)) {
                return JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            }
        } catch (error) {
            console.error(`‚ùå Erreur lecture rapport ${filename}:`, error.message);
        }
        return null;
    }

    // M√©thode pour tests sp√©cifiques
    async runQuickValidation() {
        console.log('‚ö° VALIDATION RAPIDE - COURS.HTML');
        console.log('-'.repeat(30));
        
        const quickTests = [
            () => this.checkFileExists(),
            () => this.checkBasicStructure(),
            () => this.checkCriticalFunctions()
        ];
        
        let passed = 0;
        for (const test of quickTests) {
            if (await test()) passed++;
        }
        
        const percentage = Math.round((passed / quickTests.length) * 100);
        console.log(`\n‚ö° Validation rapide: ${passed}/${quickTests.length} (${percentage}%)`);
        
        return percentage >= 80;
    }

    async checkFileExists() {
        const coursPath = path.join(__dirname, '../src/pages/cours.html');
        const exists = fs.existsSync(coursPath);
        console.log(exists ? '‚úÖ Fichier existe' : '‚ùå Fichier manquant');
        return exists;
    }

    async checkBasicStructure() {
        try {
            const coursPath = path.join(__dirname, '../src/pages/cours.html');
            const content = fs.readFileSync(coursPath, 'utf8');
            const hasHtml = content.includes('<html');
            const hasBody = content.includes('<body');
            const hasContainer = content.includes('container');
            const valid = hasHtml && hasBody && hasContainer;
            console.log(valid ? '‚úÖ Structure de base OK' : '‚ùå Structure de base KO');
            return valid;
        } catch (error) {
            console.log('‚ùå Erreur structure de base');
            return false;
        }
    }

    async checkCriticalFunctions() {
        try {
            const coursPath = path.join(__dirname, '../src/pages/cours.html');
            const content = fs.readFileSync(coursPath, 'utf8');
            const hasToggle = content.includes('function toggleSection');
            const hasValidation = content.includes('function validate');
            const hasLoad = content.includes('function loadCourse');
            const valid = hasToggle && hasValidation && hasLoad;
            console.log(valid ? '‚úÖ Fonctions critiques OK' : '‚ùå Fonctions critiques KO');
            return valid;
        } catch (error) {
            console.log('‚ùå Erreur fonctions critiques');
            return false;
        }
    }
}

// Export et ex√©cution CLI
module.exports = CoursTestSuite;

if (require.main === module) {
    const testSuite = new CoursTestSuite();
    
    // V√©rifier les arguments CLI
    const args = process.argv.slice(2);
    
    if (args.includes('--quick') || args.includes('-q')) {
        testSuite.runQuickValidation().catch(console.error);
    } else {
        testSuite.runFullTestSuite().catch(console.error);
    }
}

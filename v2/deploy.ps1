# üöÄ Script de d√©ploiement FunRevis V2
# Usage: ./deploy.ps1

Write-Host "üöÄ D√âPLOIEMENT FUNREVIS V2" -ForegroundColor Cyan
Write-Host "=============================" -ForegroundColor Cyan

# Fonction pour afficher les √©tapes
function Write-Step {
    param($StepNumber, $Message)
    Write-Host "`nüìã √âtape $StepNumber : $Message..." -ForegroundColor Yellow
}

# Fonction pour afficher les succ√®s
function Write-Success {
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

# Fonction pour afficher les erreurs
function Write-Error {
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

try {
    # √âtape 1: V√©rification des pr√©requis
    Write-Step 1 "V√©rification des pr√©requis"
    
    # V√©rifier Firebase CLI
    try {
        $firebaseVersion = firebase --version 2>$null
        Write-Success "Firebase CLI trouv√©: $firebaseVersion"
    }
    catch {
        Write-Error "Firebase CLI non trouv√©"
        Write-Host "Installez avec: npm install -g firebase-tools" -ForegroundColor White
        exit 1
    }
    
    # V√©rifier Node.js
    try {
        $nodeVersion = node --version 2>$null
        Write-Success "Node.js trouv√©: $nodeVersion"
    }
    catch {
        Write-Error "Node.js non trouv√©"
        exit 1
    }
    
    # √âtape 2: Tests de validation
    Write-Step 2 "Tests de validation"
    $testResult = node scripts/test.js
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Tests √©chou√©s - arr√™t du d√©ploiement"
        exit 1
    }
    Write-Success "Tests pass√©s avec succ√®s"
    
    # √âtape 3: Build du projet
    Write-Step 3 "Build du projet"
    try {
        node scripts/build.js
        if ($LASTEXITCODE -ne 0) {
            throw "Build √©chou√©"
        }
        Write-Success "Build termin√©"
    }
    catch {
        Write-Error "Erreur lors du build: $_"
        exit 1
    }
    
    # √âtape 4: V√©rification de l'authentification Firebase
    Write-Step 4 "V√©rification de l'authentification Firebase"
    try {
        firebase projects:list | Out-Null
        if ($LASTEXITCODE -ne 0) {
            throw "Non authentifi√©"
        }
        Write-Success "Authentification Firebase OK"
    }
    catch {
        Write-Error "Non authentifi√© sur Firebase"
        Write-Host "Ex√©cutez: firebase login" -ForegroundColor White
        exit 1
    }
    
    # √âtape 5: D√©ploiement
    Write-Step 5 "D√©ploiement sur Firebase"
    try {
        firebase deploy --only hosting
        if ($LASTEXITCODE -ne 0) {
            throw "D√©ploiement √©chou√©"
        }
        Write-Success "D√©ploiement termin√© avec succ√®s"
    }
    catch {
        Write-Error "Erreur lors du d√©ploiement: $_"
        exit 1
    }
    
    # Succ√®s final
    Write-Host "`nüéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !" -ForegroundColor Green
    Write-Host "üåê Application disponible sur: https://funrevis.web.app/" -ForegroundColor Cyan
    
    # Optionnel: ouvrir le navigateur
    $openBrowser = Read-Host "`nOuvrir l'application dans le navigateur ? (o/n)"
    if ($openBrowser -eq "o" -or $openBrowser -eq "O") {
        Start-Process "https://funrevis.web.app/"
    }
}
catch {
    Write-Error "Erreur critique: $_"
    exit 1
}

Write-Host "`nAppuyez sur une touche pour continuer..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")

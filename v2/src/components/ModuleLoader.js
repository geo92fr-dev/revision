/**
 * üöÄ ModuleLoader - Gestionnaire de chargement modulaire
 * 
 * Ce module centralise le chargement dynamique des donn√©es de cours
 * et coordonne l'affichage avec les composants p√©dagogiques.
 */

export class ModuleLoader {
    constructor() {
        this.cache = new Map();
        this.loadingPromises = new Map();
    }

    /**
     * Charge un module avec mise en cache intelligente
     */
    async loadModule(subject, level, topic) {
        const cacheKey = `${subject}-${level}-${topic}`;
        
        // V√©rifier le cache
        if (this.cache.has(cacheKey)) {
            console.log(`üì¶ Module ${cacheKey} trouv√© dans le cache`);
            return this.cache.get(cacheKey);
        }

        // √âviter les chargements multiples simultan√©s
        if (this.loadingPromises.has(cacheKey)) {
            console.log(`‚è≥ Attente du chargement en cours pour ${cacheKey}`);
            return await this.loadingPromises.get(cacheKey);
        }

        // Cr√©er la promesse de chargement
        const loadingPromise = this._performLoad(subject, level, topic);
        this.loadingPromises.set(cacheKey, loadingPromise);

        try {
            const result = await loadingPromise;
            this.cache.set(cacheKey, result);
            return result;
        } finally {
            this.loadingPromises.delete(cacheKey);
        }
    }

    /**
     * Effectue le chargement r√©el du module
     */
    async _performLoad(subject, level, topic) {
        console.log(`üîÑ Chargement du module: ${subject}/${level}/${topic}`);

        try {
            // Strat√©gie de chargement par mati√®re
            switch (subject) {
                case 'mathematiques':
                    return await this._loadMathematiques(level, topic);
                case 'francais':
                    return await this._loadFrancais(level, topic);
                case 'sciences':
                    return await this._loadSciences(level, topic);
                default:
                    return await this._loadGeneric(subject, level, topic);
            }
        } catch (error) {
            console.error(`‚ùå Erreur de chargement pour ${subject}/${level}/${topic}:`, error);
            throw new Error(`Module ${subject}/${level}/${topic} non disponible`);
        }
    }

    /**
     * Chargement sp√©cialis√© pour les math√©matiques
     */
    async _loadMathematiques(level, topic) {
        console.log(`üî¢ Chargement math√©matiques: ${level}/${topic}`);
        
        if (level === '6ieme') {
            // Essayer d'abord le chargement direct pour √©viter les probl√®mes d'index
            try {
                const result = await this._loadDirectFile('mathematiques', level, topic);
                if (result) {
                    console.log(`‚úÖ Chargement direct r√©ussi pour maths/${level}/${topic}`);
                    return result;
                }
            } catch (directError) {
                console.warn(`‚ö†Ô∏è Chargement direct √©chou√©, essai via index:`, directError);
                
                // Fallback vers l'index si le direct √©choue
                try {
                    const mathsIndex = await import(`../data/mathematiques/6ieme/index.js`);
                    
                    if (mathsIndex.mathematiques6eme && mathsIndex.mathematiques6eme[topic]) {
                        console.log(`‚úÖ Chargement via index r√©ussi pour maths/${level}/${topic}`);
                        return mathsIndex.mathematiques6eme[topic];
                    }
                } catch (indexError) {
                    console.error(`‚ùå √âchec chargement via index:`, indexError);
                }
                
                // Re-lancer l'erreur directe si tout √©choue
                throw directError;
            }
        }
        
        return await this._loadDirectFile('mathematiques', level, topic);
    }

    /**
     * Chargement g√©n√©rique pour autres mati√®res
     */
    async _loadGeneric(subject, level, topic) {
        return await this._loadDirectFile(subject, level, topic);
    }

    /**
     * Chargement d'un fichier sp√©cifique
     */
    async _loadDirectFile(subject, level, topic) {
        const filePath = `../data/${subject}/${level}/${topic}.js`;
        console.log(`üìÑ Chargement direct: ${filePath}`);
        
        const module = await import(/* @vite-ignore */ filePath);
        
        // Strat√©gies de r√©cup√©ration de donn√©es
        const strategies = [
            // Export par d√©faut
            () => module.default,
            // Convention camelCase + niveau
            () => {
                const camelTopic = this._toCamelCase(topic);
                const levelSuffix = level.replace('ieme', '') + 'eme';
                return module[camelTopic + levelSuffix];
            },
            // Nom direct du topic
            () => module[topic],
            // Cl√© avec tirets
            () => module[topic.replace(/-/g, '')],
        ];

        for (const strategy of strategies) {
            try {
                const result = strategy();
                if (result) {
                    console.log(`‚úÖ Donn√©es trouv√©es avec strat√©gie`);
                    return result;
                }
            } catch (e) {
                // Continuer avec la strat√©gie suivante
            }
        }

        throw new Error(`Aucune donn√©e trouv√©e pour ${subject}/${level}/${topic}`);
    }

    /**
     * Valide la structure des donn√©es charg√©es
     */
    validateModuleData(data) {
        console.log('üîç Validation des donn√©es du module:', data);
        
        if (!data) {
            console.warn('‚ö†Ô∏è Donn√©es nulles ou undefined');
            return false;
        }
        
        // Validation pour le format 4-phases
        const hasPhases = ['phase1', 'phase2', 'phase3', 'phase4'].some(phase => data[phase]);
        if (hasPhases) {
            console.log('‚úÖ Format 4-phases d√©tect√©');
            return true;
        }
        
        // Validation pour l'ancien format avec comp√©tences
        const hasCompetences = data.competences && Array.isArray(data.competences) && data.competences.length > 0;
        if (hasCompetences) {
            console.log('‚úÖ Format comp√©tences d√©tect√©');
            return true;
        }
        
        // Validation pour l'export direct d'une comp√©tence
        if (data.titre || data.objectif || data.cours) {
            console.log('‚úÖ Format comp√©tence directe d√©tect√©');
            return true;
        }
        
        // Si on a au moins un niveau et un titre, on accepte
        if (data.niveau || data.titre) {
            console.log('‚úÖ Format minimal accept√©');
            return true;
        }
        
        console.warn('‚ö†Ô∏è Structure de donn√©es non reconnue:', Object.keys(data));
        return false;
    }

    /**
     * Normalise les donn√©es selon le format attendu par les composants
     */
    normalizeModuleData(data) {
        console.log('üîÑ Normalisation des donn√©es:', data);
        
        // Si c'est d√©j√† une structure 4-phases, enrichir avec les informations n√©cessaires
        if (data.phase1 || data.phase2 || data.phase3 || data.phase4) {
            const normalized = {
                ...data,
                format: '4-phases',
                // S'assurer que les informations de base sont pr√©sentes
                titre: data.titre || 'Cours sans titre',
                niveau: data.niveau || '6√®me',
                description: data.description || data.objectif || 'D√©couvrez ce module d\'apprentissage',
                utilite: data.utilite || 'Cette comp√©tence d√©veloppe vos connaissances fondamentales.',
                funFact: data.funFact || 'L\'apprentissage par phases am√©liore la m√©morisation ! üß†‚ú®'
            };
            console.log('‚úÖ Donn√©es normalis√©es (format 4-phases):', normalized);
            return normalized;
        }

        // Si c'est une ancienne structure avec comp√©tences, la convertir
        if (data.competences && data.competences[0]) {
            const competence = data.competences[0];
            const normalized = {
                titre: competence.titre || data.titre || 'Cours sans titre',
                niveau: data.niveau || '6√®me',
                description: competence.objectif || data.description || 'D√©couvrez ce module d\'apprentissage',
                utilite: competence.utilite || 'Cette comp√©tence d√©veloppe vos connaissances fondamentales.',
                funFact: competence.funFact || 'L\'apprentissage actif am√©liore la r√©tention ! üß†‚ú®',
                format: 'competences',
                competence: competence
            };
            console.log('‚úÖ Donn√©es normalis√©es (format comp√©tences):', normalized);
            return normalized;
        }

        // Si c'est une comp√©tence directe (sans wrapper competences)
        if (data.objectif || data.cours) {
            const normalized = {
                titre: data.titre || 'Cours sans titre',
                niveau: data.niveau || '6√®me',
                description: data.objectif || 'D√©couvrez ce module d\'apprentissage',
                utilite: data.utilite || 'Cette comp√©tence d√©veloppe vos connaissances fondamentales.',
                funFact: data.funFact || 'L\'apprentissage actif am√©liore la r√©tention ! üß†‚ú®',
                format: 'competences',
                competence: data
            };
            console.log('‚úÖ Donn√©es normalis√©es (comp√©tence directe):', normalized);
            return normalized;
        }

        // Structure inconnue - cr√©er une structure minimale
        const normalized = {
            ...data,
            format: 'unknown',
            titre: data.titre || 'Cours en d√©veloppement',
            niveau: data.niveau || '6√®me',
            description: data.description || 'Ce cours est en cours de d√©veloppement.',
            utilite: data.utilite || 'Le contenu sera bient√¥t disponible.',
            funFact: data.funFact || 'Patience ! Notre √©quipe travaille sur ce contenu üöß‚ú®'
        };
        console.log('‚úÖ Donn√©es normalis√©es (format g√©n√©rique):', normalized);
        return normalized;
    }

    /**
     * Convertit une cha√Æne en camelCase
     */
    _toCamelCase(str) {
        return str.replace(/-([a-z])/g, (match, letter) => letter.toUpperCase())
                  .replace(/\s+([a-z])/g, (match, letter) => letter.toUpperCase())
                  .replace(/[^a-zA-Z0-9]/g, '');
    }

    /**
     * Charge les math√©matiques 6√®me
     */
    async _loadMathematiques(level, topic) {
        // D√©j√† impl√©ment√© ci-dessus
        return await this._loadDirectFile('mathematiques', level, topic);
    }

    /**
     * Charge les modules de fran√ßais
     */
    async _loadFrancais(level, topic) {
        return await this._loadDirectFile('francais', level, topic);
    }

    /**
     * Charge les modules de sciences
     */
    async _loadSciences(level, topic) {
        return await this._loadDirectFile('sciences', level, topic);
    }

    /**
     * Convertit une cha√Æne en camelCase
     */
    _toCamelCase(str) {
        return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
    }

    /**
     * Nettoie le cache (utile pour le d√©veloppement)
     */
    clearCache() {
        this.cache.clear();
        console.log('üßπ Cache ModuleLoader nettoy√©');
    }

    /**
     * Obtient les statistiques du cache
     */
    getCacheStats() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys())
        };
    }
}

// Instance singleton
export const moduleLoader = new ModuleLoader();

// CLEANER SIMPLIFI√â - Compatible ES6
import fs from 'fs/promises';
import path from 'path';

async function cleanProject() {
  console.log('üßπ NETTOYAGE AUTOMATIQUE EN COURS...\n');
  
  // Fichiers obsol√®tes √† supprimer
  const obsoleteFiles = [
    'src/coursData.js',
    'src/quizData.js',
    'structure-proposee.js',
    'test-final.js',
    'test-structure.mjs'
  ];

  let deletedCount = 0;
  let bytesFreed = 0;

  for (const file of obsoleteFiles) {
    try {
      const stats = await fs.stat(file);
      await fs.unlink(file);
      console.log(`‚úÖ Supprim√©: ${file} (${Math.round(stats.size/1024)}KB)`);
      deletedCount++;
      bytesFreed += stats.size;
    } catch (error) {
      if (error.code !== 'ENOENT') {
        console.log(`‚ö†Ô∏è  ${file}: ${error.message}`);
      }
    }
  }

  // Cr√©er r√©pertoire docs et d√©placer documentation importante
  try {
    await fs.mkdir('docs', { recursive: true });
    console.log('‚úÖ R√©pertoire docs/ cr√©√©');
  } catch (error) {
    // D√©j√† existe
  }

  // D√©placer documents importants
  const docsToMove = [
    { from: 'PLAN-OPTIMISATION-ULTRA-RIGOUREUX.md', to: 'docs/architecture-plan.md' },
    { from: 'RESUME-EXECUTIF.md', to: 'docs/executive-summary.md' }
  ];

  for (const doc of docsToMove) {
    try {
      await fs.rename(doc.from, doc.to);
      console.log(`‚úÖ D√©plac√©: ${doc.from} ‚Üí ${doc.to}`);
    } catch (error) {
      if (error.code !== 'ENOENT') {
        console.log(`‚ö†Ô∏è  ${doc.from}: ${error.message}`);
      }
    }
  }

  console.log(`\nüìä NETTOYAGE TERMIN√â:`);
  console.log(`   ‚Ä¢ Fichiers supprim√©s: ${deletedCount}`);
  console.log(`   ‚Ä¢ Espace lib√©r√©: ${Math.round(bytesFreed/1024)}KB`);
  console.log(`   ‚Ä¢ Documentation organis√©e dans docs/`);
}

cleanProject().catch(console.error);
